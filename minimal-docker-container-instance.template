{
    "AWSTemplateFormatVersion": "2010-09-09",

    "Description": "A minimal Cloud Formation Template for Docker",

    "Parameters": {

        "KeyName": {
            "Description"          : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
            "Type"                 : "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription": "must be the name of an existing EC2 KeyPair.",
            "Default"              : "vinh"
        },

        "InstanceType": {
            "Description"          : "Container Instance type",
            "Type"                 : "String",
            "Default"              : "t2.micro",
            "AllowedValues"        : ["t2.micro", "t2.small", "t2.medium", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge" ],
            "ConstraintDescription": "must be a valid EC2 instance type."
        }

    },

    "Mappings": {

        "AWSRegionToAMI": {
            "us-east-1"     : {"AMIID": "ami-ddc7b6b7"},
            "us-west-2"     : {"AMIID": "ami-c188b0f1"},
            "eu-west-1"     : {"AMIID": "ami-3db4ca4a"},
            "ap-northeast-1": {"AMIID": "ami-3077525e"},
            "ap-southeast-2": {"AMIID": "ami-23b4eb40"}
        }

    },

    "Resources": {

        "SecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Allowed Ports",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 80,
                        "ToPort": 80,
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 22,
                        "ToPort": 22,
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },

        "ContainerInstance": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "IamInstanceProfile": "ecsInstanceRole",
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSRegionToAMI",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMIID"
                    ]
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "SecurityGroups": [
                    {
                        "Ref":"SecurityGroup"
                    }
                ],
                "KeyName": {
                    "Ref": "KeyName"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -xe\n",

                                "yum install -y aws-cfn-bootstrap\n",

                                "/opt/aws/bin/cfn-init -v ",
                                "         --stack ", {"Ref": "AWS::StackName"},
                                "         --resource ContainerInstance ",
                                "         --region ", {"Ref": "AWS::Region"}, "\n"
                            ]
                        ]
                    }
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "commands": {
                            "add_instance_to_cluster": {
                                "command": {"Fn::Join": ["", [
                                    "#!/bin/bash\n",
                                    "echo ECS_CLUSTER=",
                                    {"Ref": "GraphiteCluster"},
                                    " >> /etc/ecs/ecs.config"
                                ]]}
                            },
                            "add_docker_auth_to_cluster": {
                                "command": {"Fn::Join": ["", [
                                    "#!/bin/bash\n",
                                    "echo 'ECS_ENGINE_AUTH_TYPE=dockercfg\nECS_ENGINE_AUTH_DATA={\"https://index.docker.io/v1/\":{\"auth\":\"<auth-code>\",\"email\":\"<email>\"}}'", " >> /etc/ecs/ecs.config"
                                ]]}
                            },
                            "create_volumes": {
                                "command": {"Fn::Join": ["", [
                                    "#!/bin/bash\n",
                                    "mkdir -p /home/graphite/graphite\n",
                                    "mkdir -p /home/graphite/nginx\n",
                                    "mkdir -p /home/graphite/statsd\n",
                                    "mkdir -p /home/graphite/logrotate\n",
                                    "mkdir -p /home/graphite/log"
                                ]]}
                            }
                        },
                        "files": {
                            "/etc/cfn/cfn-hup.conf": {
                                "content": {"Fn::Join": ["", [
                                    "[main]\n",
                                    "stack=", {"Ref": "AWS::StackId"}, "\n",
                                    "region=", {"Ref": "AWS::Region"}, "\n"
                                ]]},
                                "mode"    : "000400",
                                "owner"   : "root",
                                "group"   : "root"
                            },
                            "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                                "content": {"Fn::Join": ["", [
                                    "[cfn-auto-reloader-hook]\n",
                                    "triggers=post.update\n",
                                    "path=Resources.ContainerInstances.Metadata.AWS::CloudFormation::Init\n",
                                    "action=/opt/aws/bin/cfn-init -v ",
                                    "         --stack ", {"Ref": "AWS::StackName"},
                                    "         --resource ContainerInstance ",
                                    "         --region ", {"Ref": "AWS::Region"}, "\n",
                                    "runas=root\n"
                                ]]}
                            }
                        },

                        "services": {
                            "sysvinit": {
                                "cfn-hup": {"enabled": "true", "ensureRunning": "true", "files": ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]}
                            }
                        }
                    }
                }
            }
        },

        "GraphiteCluster": {
            "Type": "AWS::ECS::Cluster"
        },

        "Service": {
            "Type": "AWS::ECS::Service",
            "DependsOn": ["ContainerInstance"],
            "Properties": {
                "Cluster": {"Ref": "GraphiteCluster"},
                "DesiredCount": "1",
                "TaskDefinition": {"Ref":"TaskDefinition"}
            }
        },

        "TaskDefinition": {
            "Type": "AWS::ECS::TaskDefinition",
            "Properties": {
                "ContainerDefinitions": [
                    {
                        "Name": "Graphite",
                        "Cpu": "512",
                        "Essential": "true",
                        "Image":"zalora/graphite-web:latest",
                        "Memory":"128",
                        "MountPoints": [
                            {
                                "ContainerPath": "/opt/graphite",
                                "SourceVolume": "graphite"
                            },
                            {
                                "ContainerPath": "/etc/nginx",
                                "SourceVolume": "nginx"
                            },
                            {
                                "ContainerPath": "/opt/statsd",
                                "SourceVolume": "statsd"
                            },
                            {
                                "ContainerPath": "/etc/logrotate.d",
                                "SourceVolume": "logrotate"
                            },
                            {
                                "ContainerPath": "/var/log",
                                "SourceVolume": "log"
                            }
                        ],
                        "PortMappings": [
                            {"HostPort": 80, "ContainerPort": 80},
                            {"HostPort": 2003, "ContainerPort": 2003},
                            {"HostPort": 8125, "ContainerPort": 8125},
                            {"HostPort": 8126, "ContainerPort": 8126}
                        ]
                    }
                ],
                "Volumes": [
                    {
                        "Name": "graphite",
                        "Host": {
                            "SourcePath": "/home/graphite/graphite"
                        }
                    },
                    {
                        "Name": "nginx",
                        "Host": {
                            "SourcePath": "/home/graphite/nginx"
                        }
                    },
                    {
                        "Name": "statsd",
                        "Host": {
                            "SourcePath": "/home/graphite/statsd"
                        }
                    },
                    {
                        "Name": "logrotate",
                        "Host": {
                            "SourcePath": "/home/graphite/logrotate"
                        }
                    },
                    {
                        "Name": "log",
                        "Host": {
                            "SourcePath": "/home/graphite/log"
                        }
                    }
                ]
            }
        },

        "DNSRecords": {
            "Type": "AWS::Route53::RecordSetGroup",
            "Properties": {
                "HostedZoneName": "core.zalora.io.",
                "RecordSets": [
                    {
                        "Name": "graphite.core.zalora.io.",
                        "Type": "A",
                        "TTL": "300",
                        "ResourceRecords": [{"Fn::GetAtt": ["ContainerInstance", "PublicIp"]}]
                    },
                    {
                        "Name": "www.graphite.core.zalora.io.",
                        "Type": "CNAME",
                        "TTL": "300",
                        "ResourceRecords": [{"Fn::GetAtt": ["ContainerInstance", "PublicDnsName"]}]
                    }
                ]
            }
        }
    },

    "Outputs": {
        "InstanceId": {
            "Description": "InstanceId of the newly created EC2 instance",
            "Value": {"Ref": "ContainerInstance"}
        },
        "AZ": {
            "Description": "Availability Zone of the newly created EC2 instance",
            "Value": {"Fn::GetAtt": ["ContainerInstance", "AvailabilityZone"]}
        },
        "PublicDNS": {
            "Description": "Public DNSName of the newly created EC2 instance",
            "Value": {"Fn::GetAtt": ["ContainerInstance", "PublicDnsName"]}
        },
        "PublicIP": {
            "Description": "Public IP address of the newly created EC2 instance",
            "Value": {"Fn::GetAtt": ["ContainerInstance", "PublicIp"]}
        },
        "ECSInstance": {
            "Description": "Location for Amazon ECS Instance",
            "Value": {"Fn::Join": ["", ["ssh ec2-user@", {"Fn::GetAtt": ["ContainerInstance", "PublicDnsName"]}]]}
        }
    }
}
